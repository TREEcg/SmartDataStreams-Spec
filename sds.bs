<pre class='metadata'>
Title: Smart Data Stream
Shortname: sds
Level: 1
Status: LS
Group: TREE community group
URL: https://w3id.org/sds/specification
Markup Shorthands: markdown yes
Editor: Pieter Colpaert, https://pietercolpaert.be
Editor: Arthur Vercruysse
Repository: https://github.com/SEMICeu/SmartDataStream
Abstract: A Smart Data Stream is a stream of object that has undergone transformations. These transformations are described using RDF. 
</pre>

# Introduction # {#introduction}

A Smart Data Stream (SDS) (`sds:Stream`) is an entity (`rdfs:subClassOf p-plan:Entity`) carrying Records (`sds:Record`) that is based on a dataset (`dcat:Dataset`) and can be built (`prov:used`) from a previous stream after applying a step (`p-plan:Step`).  

This specification uses the [P-Plan specification](http://vocab.linkeddata.es/p-plan/) to describe previous steps taking that result in the current stream.
With this description it is possible to determine the lineage of the data, especially useful with [Linked Data Event Stream](https://semiceu.github.io/LinkedDataEventStreams/).
LDES exposes a stream of RDF members, these members often don't originate from RDF data but from, for example, sensor observations.

<img width=100% src = "sds.svg"/>



<div class="example">
An example of a plan transforming sensor data into a LDES.

Plan
```turtle
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix p-plan: <http://purl.org/net/p-plan#> .
@prefix prov:   <http://www.w3.org/ns/prov#> .
@prefix :       <> .

<somePlan> a p-plan:Plan;
  rdfs:comment "A epic plan to map csv to a LDES".
```

Step 1: source
```turtle
<readStep> a p-plan:Step;
  p-plan:hasInputVar :csvLocation#1;
  p-plan:isStepOfPlan <somePlan>;
  p-plan:hasOutputVar :stream#1.
```

Step 2: RML process resulting in a new stream
```turtle
<rmlStep> a p-plan:Step;
  a rmlStep;
  p-plan:hasInputVar :rmlConfig#1, :stream#1;
  p-plan:hasOutputVar :stream#2;
  p-plan:isPreceededBy <readStep>;
  p-plan:isStepOfPlan <somePlan>;
  rdfs:comment "Map CSV rows to RML".
```

Step 3: bucketization to facilitate fragmentation
```turtle
<bucketStep> a p-plan:Step;
  p-plan:hasInputVar :bucketConfig#1, :stream#2;
  p-plan:hasOutputVar :stream#3;
  p-plan:isPreceededBy <rmlStep>;
  p-plan:isStepOfPlan <somePlan>;
  rdfs:comment "Add geospatial bucketization".
```

Step 4: actually expose a LDES
```turtle
<ldesStep> a p-plan:Step;
  p-plan:hasInputVar :ldesServerConfig#1, :stream#3;
  p-plan:isPreceededBy <bucketStep>;
  p-plan:isStepOfPlan <epicPlan>;
  rdfs:comment "Expose LDES".
```


After executing this Plan a p-plan:Activity is created
```turtle
<rmlProc> a p-plan:Activity; 
  p-plan:correspondsToStep <rmlStep>; 
  prov:used [
    a sds:Stream; 
    prov:wasGeneratedBy <inputRead>; 
    sds:carries [ a sds:Member; 
      sds:Shape  <sh>; ]; 
    p-plan:correspondsToVariable :stream#1; 
    sds:dataset [ a  dcat:Dataset ] 
  ]; 
  prov:startedAtTime "1650886052".  


<bucketization> a p-plan:Activiy;
  p-plan:correspondsToStep <bucketStep>;
  prov:used [
      a sds:Stream;
      prov:wasGeneratedBy <rmlProc>;
      sds:carries [ a sds:Member; 
        sds:Shape <sh>; ];
      p-plan:correspondsToVariable :stream#2;
      sds:dataset [ a dcat:Dataset ]
  ], [
      ldes:bucketType "substring";
      ldes:propertyPath foaf:name;
      ldes:bucketPath ldes:substringBucket;
  ];
  prov:startedAtTime "1650889052".

<ldesServer> a p-plan:Activity;
  p-plan:correspondsToStep <ldesStep>;
  prov:used [
    a sds:Stream;
    prov:wasGeneratedBy <bucketization>;
    sds:carries [
      a ImmutableMember;
      sds:shape <sh> ];
    p-plan:correspondsToVariable :stream#3;
    sds:dataset [ a dcat:Dataset ]
  ], [
    ldes:view "abc.com/epicLDES";
    p-plan:correspondsToVariable :ldesServerConfig#1
  ];
  prov:startedAtTime "1650889452".
```

</div>

The sds:Stream instance SHOULD have these properties:
- `sds:dataset`: information about the current dataset containing information about license etc.  
- `sds:carries`: information about the what record is being carried by the `sds:Stream`. This instance has type `sds:Record`.

