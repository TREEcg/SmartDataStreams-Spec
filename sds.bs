<pre class='metadata'>
Title: The Smart Data Specification for Semantically Describing Streams (SDS)
Shortname: sds
Level: 1
Status: LS
Group: TREE community group
URL: https://w3id.org/sds/specification
Markup Shorthands: markdown yes
Editor: Pieter Colpaert, https://pietercolpaert.be
Editor: Arthur Vercruysse
Repository: https://github.com/TREEcg/SmartDataStreams-Spec
Abstract: A Semantically Described Stream is a stream of Records that have undergone Steps part of a Plan. These transformations are described using RDF. This metadata model helps determine the lineage of Records on a Stream. 
</pre>

# Overview # {#overview}

The latest OWL encoding of the SDS Ontology can be found [here](./sds.ttl).

A Semantically Described Stream (SDS) consists of two parts, the SDS description and the SDS data.
The description consists of the lineage of the elements on the data stream.


## SDS Description

`sds:Stream` is an entity (`rdfs:subClassOf p-plan:Entity`), 
which carries (`sds:carries`) a stream of data records (`sds:Record`)
generated (`prov:wasGeneratedBy`) as a result of an activity (`p-plan:Activity`).
It generates a new dataset (`sds:dataset`),
consisting of the aforementioned records, for the next activity. 

This specification uses the [P-Plan specification](http://vocab.linkeddata.es/p-plan/)
to describe activities from which Streams (`sds:Stream`) are generated.  
Furthermore, the P-Plan specification makes it possible to determine the 
lineage of the data. This is a crucial part of 
[Linked Data Event Stream](https://semiceu.github.io/LinkedDataEventStreams/).
LDES exposes a stream of RDF members, these members often do not originate from RDF
data but originating from, for example, sensor observations.

## SDS Data

A `sds:Record` instance describes a data point. This instance links together the data and the stream that generated (or used) that data.
This instance can also have other properties that were created or generated by the process generating the stream.
All instances of `sds:Record` MUST conform to the shape specified in the SDS description for property `sds:shape`, this property is however optional.


## Overview of used onthologies

<table>
 <thead> <tr><th>Prefix<th>Namespace
 <tr><th>dcat<td>[https://www.w3.org/ns/dcat#](https://www.w3.org/ns/dcat#)
 <tr><th>sds<td>[https://w3id.org/sds#](https://w3id.org/sds#)
 <tr><th>sh<td>[http://www.w3.org/ns/shacl#](http://www.w3.org/ns/shacl#)
 <tr><th>p-plan<td>[http://purl.org/net/p-plan#](http://purl.org/net/p-plan#)
 <tr><th>prov<td>[http://www.w3.org/ns/prov#](http://www.w3.org/ns/prov#)
</table>

<img width=100% src = "sds.svg"/>


# Smart Data Stream vocabulary # {#vocabulary}

The base URI for the Smart Data Specificationâ€™s vocabulary is [https://w3id.org/sds#](https://w3id.org/sds#) and the preferred prefix is `sds:`.

The vocabulary exists of two main classes: `sds:Stream` a subclass of `p-plan:Entity` representing a stream of `sds:Record` which contain the actual data. 


## SDS Description

A Stream (`sds:Stream`) extends Entity (`p-plan:Entity`) and contains additional properties:

- `sds:dataset`: information about the current dataset containing information about license etc.  
- `sds:carries`: information about the what record is being carried.
- `sds:shape`: optionally specifies the shape of records on this stream.


## SDS Data

A Record (`sds:Record`) contains the following properties:
- `sds:stream`: the identifier of the corresponding stream.
- `sds:payload`: the payload of the record

A Member (`sds:Member`) subclasses `sds:Record` and has the same properties.
The range of `sds:payload` is different:

- `sds:payload`: points to the identifier of the member.

A Member can also have some of the following property:
- `sds:bucket`: indicating this member is part of an `sds:Bucket`

Buckets (`sds:Bucket`) can be used to create `tree:Collection` and contain the following properties:
 - `sds:relationType`: specifies the type of relation
 - `sds:relationBucket`: specifies the target bucket for this relation
 - `sds:relationValue`: specifies the value (similar to `tree:value`)
 - `sds:relationPath`: specifies the path (similar to `tree:path`)


## Properties overview

<table>
 <thead> <tr><th>Property<th>Domain<th>Range
  <tr style="background-color: black">
    <td colspan="100%"></td>
  </tr>
 <tr><th>sds:dataset<td>sds:Stream<td>dcat:Dataset
 <tr><th>sds:carries<td>sds:Stream<td>rdfs:Class
 <tr><th>sds:shape<td>sds:Stream<td>sh:ShapeNode
  <tr style="background-color: black">
    <td colspan="100%"></td>
  </tr>
  <tr><th>sds:stream<td>sds:Record<td>sds:Stream
 <tr><th>sds:payload<td>sds:Record<td>any
 <tr><th>sds:payload<td>sds:Member<td>IRI
 <tr><th>sds:bucket<td>sds:Member<td>sds:Bucket
  <tr style="background-color: black">
    <td colspan="100%"></td>
  </tr>
 <tr><th>sds:relationType<td>sds:Bucket<td>tree:Relation
 <tr><th>sds:relationBucket<td>sds:Bucket<td>sds:Bucket
 <tr><th>sds:relationValue<td>sds:Bucket<td>any
 <tr><th>sds:relationPath<td>sds:Bucket<td>IRI
</table>


# Examples # {#examples}

This section is non-normative.

## SDS Description

When creating a `sds:Stream` the user should create a `p-plan:Plan` indicating the expected transformations on the data stream.

The example covers a plan that starts from a csv file, transforms it to RDF with a RML Mapper. 
The generated RDF is bucketized based on the `foaf:label` property and is lastly exposed as a LDES. 


```turtle
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix p-plan: <http://purl.org/net/p-plan#> .
@prefix prov:   <http://www.w3.org/ns/prov#> .
@prefix sds:    <http://semweb.mmlab.be/ns/sds#> .
@prefix dcat:   <https://www.w3.org/ns/dcat#> .
@prefix :       <#> .

<somePlan> a p-plan:Plan;
  rdfs:comment "A epic plan to map csv file to a LDES".


# Specify p-plan variables 

<csvLocationVar> a p-plan:Variable;
  p-plan:isVariableOfPlan <somePlan>;
  rdfs:comment "Location of the CSV file".
  
:csvLocation#1 rdfs:subClassOf <csvLocationVar>.

<rmlConfigVar> a p-plan:Variable;
  p-plan:isVariableOfPlan <somePlan>;
  rdfs:comment "Location of RML config file".

:rmlConfig#1 rdfs:subClassOf <rmlConfigVar>.

<bucketConfigVar> a p-plan:Variable;
  p-plan:isVariableOfPlan <somePlan>;
  rdfs:comment "Location of RML config file".
  
:bucketConfig#1 rdfs:subClassOf <bucketConfigVar>.

<ldesServerConfigVar> a p-plan:Variable;
  p-plan:isVariableOfPlan <ldesServerConfig>;
  rdfs:subClassOf <LdesConfig>.
  
:ldesServerConfig#1 rdfs:subClassOf <ldesServerConfigVar>.

<streamVar> a p-plan:Variable;
  p-plan:isVariableOfPlan <somePlan>;
  rdfs:subClassOf <Channel>.

:stream#1 rdfs:subClassOf <streamVar>.
:stream#2 rdfs:subClassOf <streamVar>.
:stream#3 rdfs:subClassOf <streamVar>.


# Specifiy steps in the plan

<readStep> a p-plan:Step;
  p-plan:hasInputVar :csvLocation#1;
  p-plan:isStepOfPlan <somePlan>;
  p-plan:hasOutputVar :stream#1.

<rmlStep> a p-plan:Step;
  a rmlStep;
  p-plan:hasInputVar :rmlConfig#1, :stream#1;
  p-plan:hasOutputVar :stream#2;
  p-plan:isPrecededBy <readStep>;
  p-plan:isStepOfPlan <somePlan>;
  rdfs:comment "Map CSV rows to RML".

<bucketStep> a p-plan:Step;
  p-plan:hasInputVar :bucketConfig#1, :stream#2;
  p-plan:hasOutputVar :stream#3;
  p-plan:isPrecededBy <rmlStep>;
  p-plan:isStepOfPlan <somePlan>;
  rdfs:comment "Add geospatial bucketization".

<ldesStep> a p-plan:Step;
  p-plan:hasInputVar :ldesServerConfig#1, :stream#3;
  p-plan:isPrecededBy <bucketStep>;
  p-plan:isStepOfPlan <epicPlan>;
  rdfs:comment "Expose LDES".
```

Note: This `p-plan:Plan` does not explicitely inform how to connect these steps together, see the Connector Architecture for this.

Activities can be generated after running the steps of the plan.
These activities are each linked to a corresponding `p-plan:step`.

```turtle
<readCsv> a p-plan:Activity;
  p-plan:correspondsToStep <readStep>;
  prov:used [
    a void:Dataset;
    void:dataDump <file:///data/input.csv>;
  ].

<csvStream> a sds:Stream;
    prov:wasGeneratedBy <readCsv>; 
    sds:carries sds:Record; 
    p-plan:correspondsToVariable :stream#1; 
    sds:dataset [ a  dcat:Dataset ]. 

<rmlProc> a p-plan:Activity; 
  p-plan:correspondsToStep <rmlStep>; 
  prov:used <csvStream>, [
      rml:Location "somewhere";
      p-plan:correspondsToVariable :rmlConfig#1;
  ]; 
  prov:startedAtTime "1650886052".  

<rmlStream> a sds:Stream;
  a sds:Stream;
  prov:wasGeneratedBy <rmlProc>;
  sds:carries sds:Member; 
  sds:Shape <sh>; 
  p-plan:correspondsToVariable :stream#2;
  sds:dataset [ a dcat:Dataset ].

<bucketization> a p-plan:Activiy;
  p-plan:correspondsToStep <bucketStep>;
  prov:used <rmlStream>, [
      ldes:bucketType ldes:subject;
      ldes:propertyPath ex:x;
  ];
  prov:startedAtTime "1650889052".

<bucketizedStream> a sds:Stream;
    prov:wasGeneratedBy <bucketization>;
    sds:carries sds:Member;
    sds:shape <sh>;
    p-plan:correspondsToVariable :stream#3;
    sds:dataset [ a dcat:Dataset ]

<ldesServer> a p-plan:Activity;
  p-plan:correspondsToStep <ldesStep>;
  prov:used <bucketizedStream>, [
    ldes:view "abc.com/epicLDES";
    p-plan:correspondsToVariable :ldesServerConfig#1
  ];
  prov:startedAtTime "1650889452".
```

## SDS Data


```turtle
[] sds:payload "a,v,d"^^ex:csvRow;
   sds:stream <csvStream>.


ex:sample1 ex:x 1;
           ex:y 2. 

# The rmlStream contains a sds:member ex:sample1
[] sds:payload ex:sample1;
   sds:stream <rmlStream>.


<bucket1> sds:relation [
  sds:relationType tree:GreaterThanRelation ;
  sds:relationBucket <bucket2> ;
  sds:relationValue 1;
  sds:relationPath ex:x 
] .

# The bucketizedStream also contains this member ex:sample1,
# but added a sds:bucket property pointing to <bucket2>
[] sds:stream <bucketizedStream>;
   sds:payload ex:sample1;
   sds:bucket <bucket2>.

```


